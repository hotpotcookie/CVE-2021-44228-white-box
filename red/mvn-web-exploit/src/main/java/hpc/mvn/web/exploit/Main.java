package hpc.mvn.web.exploit;
//----------
import com.sun.net.httpserver.Headers;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
//----------
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import java.io.BufferedReader;
import java.net.*;
import java.io.*;
/**
 *
 * @author	Muhammad Nur Irsyad
 * @id		1807422020
 * @class	CCIT SEC 8 (TMJ)
 */
public class Main {
    private static final Logger logger = LogManager.getLogger(Main.class);
    private static int port;
    //----------	
    public static void main (String[] args) throws Exception {
        System.setProperty("com.sun.jndi.ldap.object.trustURLCodebase", "true");
        System.setProperty("com.sun.jndi.cosnaming.object.trustURLCodebase", "true");   		
        //----------			
        String[] json  = jsonParser("http://192.168.1.6:2080/properties");  
        // [0] = HOST, [1] = SHELL, [2] = PORT_LISTENER, [3] = PORT_JAVA_HTTP
        port = Integer.parseInt(json[3]);               
        //----------			
        HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
        server.createContext("/", new ExploitHandler());
        server.setExecutor(null);
        server.start();
        logger.debug("starting log4hshell http server at :"+port+" ...");		
    }

    private static String[] jsonParser(String theUrl) {  
        StringBuilder content = new StringBuilder();  
        String[] fin_arr_json = new String[4];
        String line;  		
        //----------
        try {  
            URL url = new URL(theUrl); // creating a url object  
            URLConnection urlConnection = url.openConnection(); // creating a urlconnection object  
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));  
            while ((line = bufferedReader.readLine()) != null) {  
                content.append(line + "\n");  
            }  
            bufferedReader.close();  
        }  catch(Exception e) { e.printStackTrace(); } 
        //----------		 
        String[] arr_json = content.toString().split("[\\[\\{,\\]\\}:\\\"]+");
        for (int i = 0; i < (arr_json.length); i++) {
            if ((!arr_json[i].equals("")) && (i%2 == 0)) {
                    fin_arr_json[(i/2)-1] = arr_json[i];
            }
        } 
        return fin_arr_json; 
    }    
    
    static class ExploitHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange t) throws IOException {
            Headers payload = t.getRequestHeaders();
            logger.info	("User-Agent: "+payload.getFirst("User-Agent"));
            //----------
//            String last_log = "", line = "";
//            DateTimeFormatter dtf_ext = DateTimeFormatter.ofPattern("dd_MM_yyyy");
//            DateTimeFormatter dtf_par = DateTimeFormatter.ofPattern("MM-yyyy");		
//            LocalDateTime now = LocalDateTime.now();
//            //----------		
//            String path = "src\\log\\"+dtf_par.format(now)+"\\app.log."+dtf_ext.format(now);
//            String path_save = "";
//            String os_name = System.getProperty("os.name");
//            if (!os_name.contains("Windows")) {path = "src/log/"+dtf_par.format(now)+"/app.log."+dtf_ext.format(now);}
//            if (os_name.contains("Windows")) { path_save = path.replace("\\", "\\\\");} else {path_save = path;}
//            //----------					
//            try {
//                FileReader fr = new FileReader(path);
//                BufferedReader br = new BufferedReader(fr);
//                while((line = br.readLine()) != null) {
//                        last_log = line;
//                }
//            } catch (IOException ex) {}			
            //----------
            String response = "{\"data\":{ \"status\": 200, \"user-agent\": \""+payload.getFirst("User-Agent")+"\"}}";			
            t.getResponseHeaders().set("Content-Type", "application/json");			
            t.sendResponseHeaders(200, response.length());
            OutputStream os = t.getResponseBody();
            os.write(response.getBytes());
            os.close();
        }
    }	
}
