#!/bin/bash
#----------
RED="\e[95m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[36m"
ENDCOLOR="\e[0m"
#---------- 107 52
: '
(n) BACKTRACK
provide interactive tty and command exploration using which about the system utility despite the symbolic link
payload are also will be injected via netcat filesharing. heres are pinned favorable commands by cheatsheet:
- netcat 	- ncat   	- mvn     	- netstat    	- tput		- $TERM
- python   	- java    	- find    	- ifconfig      - tcpdump
- nano     	- javac   	- wget    	- iwconfig		- tar
'``
#----------
check_dependencies() { ## check coreutils dan python
	check_stty=$(dpkg-query -W -f='${Status}' coreutils 2>/dev/null | grep -c "ok installed")
	check_python=$(readlink -f $(whereis python) | grep bin | grep -wv config | sort -r | head -1)
	check_ncat=$(dpkg-query -W -f='${Status}' netcat-openbsd 2>/dev/null | grep -c "ok installed")	
	checker=0
	if [[ $check_stty -eq 0 ]]; then echo "coreutils is not installed ..."; else checker=$((checker+1)); fi
	if [[ $check_ncat -eq 0 ]]; then echo "netcat-openbsd is not installed ..."; else checker=$((checker+1)); fi		
	if [[ -z $check_python ]]; then echo "python is not installed ..."; else checker=$((checker+1)); fi
	if [[ $checker -eq 3 ]]; then echo "true $check_python"; else echo "false"; fi
}
#----------
opt_help() { ## display command usage
	echo -e "Usage: backtrack [OPTION]... [ARG]..."
	echo -e "Red Team utilities for setting up payload & generate interactive shell\n"
	echo -e "Available flag options, starred one are optional combinations ...\n"
	echo -e "  ${GREEN}-h${ENDCOLOR}\t launch command usage for avilable flag options & examples"	
	echo -e "  ${GREEN}-i${ENDCOLOR}\t initiate interactive tty's adjustment using the latest available python"
	echo -e "  ${GREEN}-s${ENDCOLOR}\t show information about command's binaries path & network interfaces "		
	echo -e "  ${GREEN}-p${ENDCOLOR}\t ..."
	#echo -e "  ${GREEN}-o ${YELLOW}**${ENDCOLOR}\t save the scan result to a specified file. saved to port-sweep/log by default"
	#echo -e "  ${GREEN}-s ${YELLOW}**${ENDCOLOR}\t sleep into the port that have been reached a given timeout in integer"
	#echo -e "  ${GREEN}-i ${YELLOW}**${ENDCOLOR}\t perform dependencies checking & installation to the system"
	echo -e "\nExamples:\n"
	echo -e "  ${YELLOW}$ ${ENDCOLOR}bash backtrack ${GREEN}-h${ENDCOLOR}"		
	echo -e "  ${YELLOW}$ ${ENDCOLOR}bash backtrack ${GREEN}-i${ENDCOLOR}"
	echo -e "  ${YELLOW}$ ${ENDCOLOR}bash backtrack ${GREEN}-s${ENDCOLOR}"
	#echo -e "  bash port-sweep ${GREEN}-t${ENDCOLOR} api.example.com ${GREEN}-p${ENDCOLOR} 22,80,443 ${GREEN}-o${ENDCOLOR} result.log"
	#echo -e "  bash port-sweep ${GREEN}-t${ENDCOLOR} api.example.ac.id ${GREEN}-p${ENDCOLOR} 1-65535 ${GREEN}-o${ENDCOLOR} result.log ${GREEN}-s${ENDCOLOR} 10\n"
	echo -e "\nFull documentation at github.com/hotpotcookie/lol4j-white-box/docs"
	echo -e "Open issues and report bugs to github.com/hotpotcookie/lol4j-white-box"
	exit 0
}
#----------
opt_initiate() { ## initiate terminal stty upgrade & terminal adjustment
	col=$(($(tput cols)-1))
	row=$(($(tput lines)-1))
	echo -e "${RED}[-]${ENDCOLOR} spawning python's tty in ${BLUE}$1${ENDCOLOR} ..."
	echo -e "${RED}[-]${ENDCOLOR} detecting terminal size, ${BLUE}$col${ENDCOLOR} x ${BLUE}$row${ENDCOLOR} ..."
	echo -e "${RED}[-]${ENDCOLOR} to use interactive shell, please do the following commands after suspension ..."
	echo -e "${RED}[-]${ENDCOLOR} ${GREEN}$ ${ENDCOLOR}${YELLOW}stty raw -echo && fg && reset ${ENDCOLOR}"
	echo -e "${RED}[-]${ENDCOLOR} ${GREEN}$ ${ENDCOLOR}${YELLOW}stty rows $row columns $col ${ENDCOLOR}"
	$1 -c 'import pty; pty.spawn("/bin/bash")'
	exit 0
}
#----------
opt_show() { ## show information about system (path variabel & system information) in array
	arr_command=("nano" "vim" "ncat" "netcat" "find" "wget" "netstat" "tput" "tcpdump" "tar" "ifconfig" "ufw" "base64")
	arr_variable=("java" "javac" "mvn" "python")
	python_var=$1
	echo -e "${RED}[-]${ENDCOLOR} displaying command's binaries path ...\n:::"
	for env in ${arr_variable[@]}; do
		if [[ $env == "python" ]]; then echo -e "${YELLOW}python${ENDCOLOR}\t : $python_var"; continue; fi
		echo -e "${YELLOW}$env${ENDCOLOR}\t : $(which $env)"
	done; echo "--"
	for cmd in ${arr_command[@]}; do
		if [[ $cmd == "ifconfig" ]]; then echo -e "${YELLOW}ifconfig${ENDCOLOR} : $(which ifconfig)"; continue; fi
		echo -e "${YELLOW}$cmd${ENDCOLOR}\t : $(which $cmd)"
	done; echo ""
	echo -e "${RED}[-]${ENDCOLOR} displaying network interfaces ...\n:::"	
	get_interface=$(netstat -i | tr -s '\t' ' ' | cut -d ' ' -f 1 | grep -wv Kernel | grep -wv Iface | tr -s '\n' ' ')
	IFS=$' '
	arr_interface=($get_interface)
	for int in ${arr_interface[@]}; do
		echo -e "${BLUE}$int${ENDCOLOR}\t : $(ifconfig $int | grep inet | grep -vw inet6 | tr -s '\t' ' ' | cut -d ' ' -f 3-5)"
	done
	exit 0
}
#----------
opt_payload() { ## file transfer for payload & setup automation (unpack tar.gz, decode base64, etc)
	echo "$1"
	exit 0
}
#==========
get_check=$(check_dependencies | cut -d ' ' -f 1)
get_python=$(check_dependencies | cut -d ' ' -f 2)
if [[ $get_check == "true" ]]; then
	while getopts ":p :i :s :h" opt; do
		case $opt in
			p) opt_payload "payload" ;;
			i) opt_initiate $get_python ;;
			s) opt_show $get_python ;;
			h) opt_help ;;
			*) h="go"
		esac
	done
	#----------	
	if [[ "$h" != "go" ]]; then
		opt_help
		exit 0
	fi
	#----------	
else
	echo "[-] host have unmet dependencies ..."
	echo -e "[-] quitting ...\n"
	exit 1
fi
